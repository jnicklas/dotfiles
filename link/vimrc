call plug#begin('~/.vim/plugged')

Plug 'junegunn/vim-easy-align'
Plug 'tpope/vim-rails'
Plug 'tpope/vim-endwise' " automatically end code blocks
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired' " normal mode abbreviations
Plug 'tpope/vim-abolish' " case conversions (and abbreviations)
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-ragtag'
Plug 'tpope/vim-vinegar' " file navigation
Plug 'tpope/vim-eunuch' " UNIX shell command shortcuts
Plug 'kchmck/vim-coffee-script'
Plug 'michaeljsmith/vim-indent-object'
Plug 'tpope/vim-dispatch'
Plug 'radenling/vim-dispatch-neovim'
Plug 'tpope/vim-fugitive'
Plug 'jremmen/vim-ripgrep'
Plug 'vim-ruby/vim-ruby'
Plug 'rizzatti/dash.vim'
Plug 'tpope/vim-commentary'
Plug 'ekalinin/Dockerfile.vim'
Plug 'tpope/vim-projectionist'
Plug 'majutsushi/tagbar'
Plug 'elixir-lang/vim-elixir'
Plug 'rust-lang/rust.vim'
Plug 'jparise/vim-graphql'
Plug 'wellle/targets.vim'
Plug 'kien/ctrlp.vim'
Plug 'slim-template/vim-slim'
Plug 'thoughtbot/vim-rspec'
Plug 'airblade/vim-gitgutter'
Plug 'vim-airline/vim-airline'
Plug 'dhruvasagar/vim-table-mode'
Plug 'slashmili/alchemist.vim' " elixir stuff
Plug 'nikvdp/ejs-syntax'
Plug 'jakwings/vim-pony'
Plug 'joukevandermaas/vim-ember-hbs'

call plug#end()

set exrc " enable per-directory .vimrc files
set secure " disable unsafe commands in local .vimrc files

set tabstop=2
set smarttab
set shiftwidth=2
set autoindent
set expandtab
set tags=tags
set colorcolumn=120

set previewheight=50

" Theme settings
syntax enable
let g:solarized_termcolors=256
colorscheme solarized
set background=dark

" Explicitly set 256 color support
set t_Co=256

" Enable filetype-specific indenting and plugins
filetype plugin indent on

" Disble vi compatibility
set nocompatible

" Disable bell.
set vb t_vb=

" Paste from last intentionally yanked register
nnoremap <leader>p "0p
nnoremap <leader>P "0P

" resize current buffer in the given direction
nnoremap <D-right> :vertical resize +5<cr>
nnoremap <D-up> :resize -5<cr>
nnoremap <D-down> :resize +5<cr>
nnoremap <D-left> :vertical resize -5<cr>

" dispatch.vim keybinding
nnoremap <F9> :Dispatch<CR>
nnoremap <leader>' :Dispatch<CR>

" line numbers
set number
set numberwidth=3

" Open new horizontal split windows below current
set splitbelow

" Open new vertical split windows to the right
set splitright

" Yank from the cursor to the end of the line, to be consistent with C and D.
nnoremap Y y$

" don't wrap lines that are too long
set nowrap

" remove trailing white space on save
autocmd BufWritePre * :%s/\s\+$//e

" set up file types for some extensions
autocmd BufRead *.json :set ft=javascript
autocmd BufRead *.es6 :set ft=javascript
autocmd BufRead *.jbuilder :set ft=ruby
autocmd BufRead *.serenade :set ft=slim

" python should use 4 spaces instead of 2
autocmd BufRead,BufNewFile *.py set shiftwidth=4
autocmd BufRead,BufNewFile *.py set tabstop=4

" don't ever create swap files, they're annoying!
set nobackup
set noswapfile

" navigate splits
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l
nnoremap <C-q> <C-w>q

" close preview window more easily
nnoremap <C-c> <C-w>z

" highlight search results
set hlsearch
set incsearch

" open git status
nnoremap gs :Gstatus<CR>

" clear highlighted matches with space
nnoremap <silent> <Space> :nohlsearch<Bar>:echo<CR>

" convenient shortcut to save file
nnoremap <C-s> :w<CR>

" allow switching away from buffers that have changes
set hidden

" move in quickfix list, useful with Ack.vim
nnoremap <C-S-n> :cprevious<CR>
nnoremap <C-n> :cnext<CR>

" Disable Ex mode. Fuck off.
nnoremap Q <nop>

" Use the same symbols as TextMate for tabstops and EOLs
set listchars=nbsp:¬,tab:▸\ ,eol:¬

" Enable list mode, show hidden characters
set list

"Invisible character colors
highlight NonText guifg=#295C69
highlight SpecialKey guifg=#295C69

" enable powerline fonts for airline
let g:airline_powerline_fonts = 1
set laststatus=2

" reduce update time (default is 4s)
set updatetime=250

" rspec bindings
let g:rspec_command = "Dispatch bin/rspec {spec}"
map <Leader>t :call RunCurrentSpecFile()<CR>
map <Leader>s :call RunNearestSpec()<CR>
map <Leader>l :call RunLastSpec()<CR>
map <Leader>a :call RunAllSpecs()<CR>

" map :W to save file and also create directory it is in
function! WriteCreatingDirs()
    execute ':silent !mkdir -p %:h'
    write
endfunction
command! W call WriteCreatingDirs()

if has("nvim")
  " terminal mappings
  tnoremap <Esc> <C-\><C-n>
  tnoremap <C-h> <C-\><C-N><C-w>h
  tnoremap <C-j> <C-\><C-N><C-w>j
  tnoremap <C-k> <C-\><C-N><C-w>k
  tnoremap <C-l> <C-\><C-N><C-w>l
  tnoremap <C-q> <C-\><C-N><C-w>q

  " show substitution live preview
  set inccommand=nosplit


  " enter insert mode when entering terminal
  autocmd BufWinEnter,WinEnter term://* startinsert

  " Opens up a new buffer, either vertical or horizontal. Count can be used to
  " specify the number of visible columns or rows.
  fun! s:openBuffer(count, vertical)
    let cmd = a:vertical ? 'vnew' : 'new'
    let cmd = a:count ? a:count . cmd : cmd
    exe cmd
  endf

  " Opens a new terminal buffer, but instead of doing so using 'enew' (same
  " window), it uses :vnew and :new instead. Usually, I want to open a new
  " terminal and not replace my current buffer.
  fun! s:openTerm(args, count, vertical)
    call s:openBuffer(a:count, a:vertical)
    exe 'terminal' a:args
    exe 'startinsert'
  endf

  command! -count -nargs=* Sterm call s:openTerm(<q-args>, <count>, 0)
  command! -count -nargs=* Vterm call s:openTerm(<q-args>, <count>, 1)
endif

